<h1>Search</h1>
<table id="tab" class="table table-striped">
  <thead>
    <tr>
		<th class="concept">Concept</th>
	    <th class="usage">Usage</th>
	    <th class="example">Examples</th>
	    <th class="description">Description</th>
    </tr>
  </thead>

<tbody>

	<tr>
	  <td>Create</td>
	  <td>
	 <code><strong>[</strong><em>contents</em><strong>]</strong></code>
	  </td>
	  <td>
	 <p><code><strong>[]</strong></code></p>

	 <p><code>
	   <strong>[</strong><em>"Rails", "fun", 5</em><strong>]</strong>
	 </code></p>
	  </td>
	  <td>Creates an Array, empty or with the specified contents.</td>
	</tr>
	<tr>
	  <td>Number of elements</td>
	  <td>
	 <code>array<strong>.size</strong></code>
	  </td>
	  <td>
	 <p><code>[]<strong>.size</strong> # => 0</code></p>

	 <p><code>[1, 2, 3]<strong>.size</strong> # => 3</code></p>

	 <p><code>["foo", "bar"]<strong>.size</strong> # => 2</code></p>
	  </td>
	  <td>Returns the number of elements in an Array.</td>
	</tr>
	<tr>
	  <td>Access</td>
	  <td>
	 <code>
	   array<strong>[</strong><em>position</em><strong>]</strong>
	 </code>
	  </td>
	  <td>
	<pre><code>array = ["hi", "foo", "bar"]
	array<strong>[</strong><em>0</em><strong>]</strong> # => "hi"
	array<strong>[</strong><em>2</em><strong>]</strong> # => "bar"</code></pre>
	  </td>
	  <td>As an Array is a collection of different elements, you often want
	 to access a single element of the Array.
	 Arrays are indexed by numbers so you can use a number
	 to access an individual element. Be aware that the
	 numbering actually starts with "0" so the first element
	 actually is the 0th. And the last element of a three element
	 array is element number 2.
	  </td>
	</tr>
	<tr>
      <td>Adding an element</td>
      <td>
   	 <code>array <strong>&lt;&lt;</strong> <em>element</em></code>
      </td>
      <td>
   <pre><code>array = [1, 2, 3]
   array <strong>&lt;&lt;</strong> <em>4</em>
   array # => [1, 2, 3, 4]
   </code></pre>
      </td>
      <td>
   	 Adds the element to the end of the array,
   	 increasing the size of the array by one.
      </td>
    </tr>
    <tr>
      <td>Assigning</td>
      <td>
   	 <code>array<strong>[</strong><em>number</em><strong>] =
   	 </strong> <em>value</em></code>
      </td>
      <td>
   <pre><code>array = ["hi", "foo", "bar"]
   array<strong>[</strong><em>2</em><strong>] =</strong> <em>"new"</em>
   array # => ["hi", "foo", "new"]</code></pre>
      </td>
      <td>Assigning new Array Values works a lot like accessing
   	 them; use an equals sign to set a new value. Voila!
   	 You changed an element of the array! Weehuuuuu!
      </td>
    </tr>
    <tr>
      <td>Delete at index</td>
      <td><code>
   	 array<strong>.delete_at</strong><em>(i)</em>
      </code></td>
      <td>
   <pre><code>array = [0, 14, 55, 79]
   array<strong>.delete_at</strong><em>(2)</em>
   array # => [0, 14, 79]
   </code></pre>
      </td>
      <td>
   	 Deletes the element of the array at the specified index. Remember
   	 that indexing starts at 0. If you specify an index larger than the
   	 number of elements in the array, nothing will happen.
      </td>
    </tr>
    <tr>
      <td>Iterating</td>
      <td>
   	 <code>array<strong>.each</strong> <em>do |e| .. end</em></code>
      </td>
      <td>
   	 <p><code>
   	   persons<strong>.each</strong> <em>do |p| puts p.name end</em>
   	 </code></p>

   	 <p><code>
   	   numbers<strong>.each</strong> <em>do |n| n = n * 2 end</em>
   	 </code></p>
      </td>
      <td>
   	 <p>
   	   "Iterating" means doing something for <em>each</em> element
   	   of the array. Code placed between <em>do</em> and <em>end</em>
   	   determines what is done to each element in the array.
   	 </p>

   	 <p>
   	   The first example prints the name of every person in the array to
   	   the console. The second example simply doubles every number of a
   	   given array.
   	 </p>
      </td>
    </tr>
	<tr>
	  <td>Change directory</td>
	  <td>
		<code><strong>cd</strong> <em>directory</em></code>
	  </td>
	  <td>
		<p><code>cd my_app</code></p>

		<p><code>cd my_app/app/controllers</code></p>
	  </td>
	  <td>Changes the directory to the specified directory on the
		console.
	  </td>
	</tr>
	<tr>
	  <td>List contents directory</td>
	  <td>
		<p><code><strong>ls</strong> <em>directory</em></code></p>

		<p><code>Windows: <strong>dir</strong> <em>directory</em></code>
		</p>
	  </td>
	  <td>
		<p><code><strong>ls</strong></code></p>

		<p><code><strong>ls</strong> <em>my_app</em></code></p>
	  </td>
	  <td>Shows all contents (files and folders) of the directory.
		If no directory is specified shows the contents of the
		current directory.
	  </td>
	</tr>
	<tr>
	  <td>Directory you are currently in</td>
	  <td><code><strong>pwd</strong></code></td>
	  <td><code><strong>pwd</strong></code></td>
	  <td>Shows the full path of the directory you are currently
		in. E.g. /home/tobi/railsgirls
		<br />
		A note on filenames: if a file or directory name starts with a slash / as in the output of pwd above, it is an absolute filename specifying the complete filename starting at the root of the current file system (e.g. hard disk). If the slash (/) is omitted, the file name is relative to the current working directory.
	  </td>
	</tr>
	<tr>
	  <td>Create a new directory</td>
	  <td><code><strong>mkdir</strong> <em>name</em></code></td>
	  <td>
		<p><code><strong>mkdir</strong> <em>rails</em></code></p>
		<p><code><strong>mkdir</strong> <em>fun</em></code></p>
	  </td>
	  <td>
		Creates a directory with the given name in the folder you are currently
		in.
	  </td>
	</tr>
	<tr>
	  <td>Delete a file</td>
	  <td>
		<p><code><strong>rm</strong> <em>file</em></code></p>

		<p><code>Windows: <strong>del</strong> <em>file</em></code>
	  </td>
	  <td>
		<p><code><strong>rm</strong> <em>foo</em></code></p>
		<p><code><strong>rm</strong> <em>index.html</em></code></p>
		<p><code><strong>rm</strong> <em>pictures/old_picture.jpg</em></code></p>
	  </td>
	  <td>
		<p>Deletes the specified file. Be <strong>extra cautious</strong> with this
		as it would be too bad to delete something you still need :-(</p>
		<p>
		  You can simply specify the name of a file of the directory you are
		  currently in. However you can also specify a path, this is shown in the
		  third example. There we delete the <em>old_picture.jpg</em> file from
		  the <em>pictures</em> folder.
		</p>
	  </td>
	</tr>
	<tr>
	  <td>Delete a directory</td>
	  <td>
		<p><code><strong>rm -r</strong> <em>folder</em></code></p>

		<p><code>Windows: <strong>rd</strong> <em>folder</em></code>
	  </td>
	  <td>
		<p><code><strong>rm -r</strong> <em>stuff_i_dont_need</em></code></p>
		<p><code><strong>rm -r</strong> <em>stuff_i_dont_need/</em></code></p>
		<p><code><strong>rm -r</strong> <em>old_application</em></code></p>
	  </td>
	  <td>
		<p>Deletes the specified folder <strong>and all of its contents</strong>.
		  So please be <strong>super cautious</strong> with this! Make sure that
		  you do not need any of the contents of this folder any more.
		</p>
		<p>
		  So why would you want to delete a whole folder? Well maybe it was an old
		  application that you do not need anymore :-)
		</p>
	  </td>
	</tr>
	<tr>
	  <td>Starting a program</td>
	  <td><code><strong>program</strong> <em>arguments</em></code></td>
	  <td>
		<p><code><strong>firefox</strong></code></p>

		<p><code>
		  <strong>firefox</strong> <em>railsgirlsberlin.de</em></code>
		</p>

		<p><code><strong>irb</strong></code></p>
	  </td>
	  <td>Starts the program with the given name and arbitrary arguments
		if the program takes arguments. Firefox is just one example. Starting
		Firefox without arguments just opens up Firefox. If you give it an
		argument it opens the specified URL.
		When you type in <code>irb</code> this starts <em>interactive ruby</em>.
	  </td>
	</tr>
	<tr>
	  <td>Abort the program</td>
	  <td>Press <strong>Ctrl + C</strong></td>
	  <td>-</td>
	  <td>This will abort the program currently running in the terminal.
		For instance this is used to shut down the Rails server.
		You can also abort many other related tasks with it, including:
		bundle install, rake db:migrate, git pull and many more!
	  </td>
	</tr>
	<tr>
	  <td>Creating</td>
	  <td><code>
		<strong>{</strong>key <strong>=></strong> value<strong>}</strong>
	  </code></td>
	  <td>
		<p><code>
		  <strong>{</strong>:hobby <strong>=></strong>
		  "programming"<strong>}</strong>
		</code></p>
	<pre><code><strong>{</strong>42 <strong>=></strong> "answer", "score" <strong>=></strong> 100,
	:name <strong>=></strong> "Tobi"<strong>}</strong>
	</code></pre>
	  </td>
	  <td>
		You create a hash by surrounding the key-value pairs with curly
		braces. The arrow always goes from the <em>key</em> to the
		<em>value</em> depicting the meaning: <em>"This key points to this
		value."</em>. Key-value pairs are then separated by commas.
	  </td>
	</tr>
	<tr>
	  <td>Accessing</td>
	  <td><code>hash<strong>[</strong>key<strong>]</strong></code></td>
	  <td>
	<pre><code>hash = {:key => "value"}
	hash<strong>[</strong>:key<strong>]</strong> # => "value"
	hash<strong>[</strong>foo<strong>]</strong> # => nil
	</code></pre>
	  </td>
	  <td>
		Accessing an entry in a hash looks a lot like accessing it in
		an <em>array</em>. However with a hash the key can be anything, not
		just numbers. If you try to access a key that does not exist, the
		value <code>nil</code> is returned, which is Ruby's way of saying
		"nothing", because if it doesn't recognize the key it can't return
		a value for it.
	  </td>
	</tr>
	<tr>
	  <td>Assigning</td>
	  <td>
		<code>hash<strong>[</strong>key<strong>] =</strong> value</code>
	  </td>
	  <td>
	<pre><code>hash = {:a => "b"}
	hash<strong>[</strong>:key<strong>] =</strong> "value"
	hash # => {:a=>"b", :key=>"value"}
	</code></pre>
	  </td>
	  <td>
		Assigning values to a hash is similar to assigning values to an
		array. With a hash, the key can
		be a number or it can be a symbol, string,
		number... or anything, really!
	  </td>
	</tr>
	<tr>
	  <td>Deleting</td>
	  <td><code>hash<strong>.delete</strong><em>(key)</em></code></td>
	  <td>
	<pre><code>hash = {:a => "b", :b => 10}
	hash<strong>.delete</strong><em>(:a)</em>
	hash # => {:b=>10}
	</code></pre>
	  </td>
	  <td>
		You can delete a specified key from the hash, so that the key and its
		value can not be accessed.
	  </td>
	</tr>
	<tr>
	  <td>normal Number</td>
	  <td><code><strong>number_of_your_choice</strong></code></td>
	  <td>
		<p><code><strong>0</strong></code></p>

		<p><code><strong>-11</strong></code></p>

		<p><code><strong>42</strong></code></p>
	  </td>
	  <td>
		Numbers are natural for Ruby, you just have to enter them!
	  </td>
	</tr>
	<tr>
	  <td>Decimals</td>
	  <td><code><strong>main.decimal</strong></code></td>
	  <td>
		<p><code><strong>3.2</strong></code></p>

		<p><code><strong>-5.0</strong></code></p>
	  </td>
	  <td>
		You can achieve decimal numbers in Ruby simply by adding a point.
	  </td>
	</tr>
	<tr>
	  <td>Basic Math</td>
	  <td>
		<code>n <strong>operator</strong> <em>m</em></code>
	  </td>
	  <td>
		<p><code>2 <strong>+</strong> <em>3</em> # => 5</code></p>

		<p><code>5 <strong>-</strong> <em>7</em> # => -2</code></p>

		<p><code>8 <strong>*</strong> <em>7</em> # => 56</code></p>

		<p><code>84 <strong>/</strong> <em>4</em> # => 21</code></p>
	  </td>
	  <td>
		In Ruby you can easily use basic math operations.
		In that sense you may use Ruby as a super-powered calculator.
	  </td>
	</tr>
	<tr>
	  <td>Comparison</td>
	  <td>
		<code>n <strong>operator</strong> <em>m</em></code>
	  </td>
	  <td>
		<p><code>12 <strong>&gt;</strong> <em>3</em> # => true</code></p>

		<p><code>12 <strong>&lt;</strong> <em>3</em> # => false</code></p>

		<p><code>7 <strong>&gt;=</strong> <em>7</em> # => true</code></p>
	  </td>
	  <td>
		<p>Numbers may be compared to determine if a number is bigger or smaller
		  than another number. When you have the age of a person saved in the
		  <code>age</code> variable you can see if that person is considered
		  an adult in Germany:</p>

		<p><code>age >= 18 # true or false</code></p>
	  </td>
	</tr>
	<tr>
	  <td>Comment</td>
	  <td>
	    <code><strong>#</strong> <em>Comment text</em></code>
	  </td>
	  <td>
	    <p>
	      <code><strong>#</strong> <em>This text is a comment</em></code>
	    </p>

	    <p>
	      <code>some.ruby_code <strong>#</strong> A comment</code>
	    </p>

	    <p>
	      <code><strong>#</strong> some.ignored_ruby_code</code>
	    </p>
	  </td>
	  <td>
	    Ruby ignores everything that is marked as a comment. It does not try
	    to execute it. Comments are just there for you as information.
	    Comments are also commonly used to <em>comment out code</em>. That
	    is when you don't want some part of your code to execute
	    but you don't want to delete it just yet, because you are trying
	    different things out.
	  </td>
	</tr>
	<tr>
	  <td>Variables</td>
	  <td>
	    <code><strong>variable =</strong> <em>some_value</em></code>
	  </td>
	  <td>
	<pre><code><strong>name =</strong> <em>"Tobi"</em>
	<strong>name</strong> # => "Tobi"</code></pre>
	<pre><code><strong>sum =</strong> <em>18 + 5</em>
	<strong>sum</strong> # => 23</code></pre>
	  </td>
	  <td>
	    With a variable you tell Ruby that from now on you want to refer to
	    that value by the name you gave it. So for the first example, from
	    now on when you use <em>name</em> Ruby will know that you meant
	    <em>"Tobi"</em>.
	  </td>
	</tr>
	<tr>
	  <td>Console output</td>
	  <td>
	    <code><strong>puts</strong> <em>something</em></code>
	  </td>
	  <td>
	    <p><code><strong>puts</strong> <em>"Hello World"</em></code></p>

	    <p><code><strong>puts</strong> <em>[1, 5, "mooo"]</em></code></p>
	  </td>
	  <td>
	    Prints its argument to the console. Can be used in Rails apps
	    to print something in the console where the server is running.
	  </td>
	</tr>
	<tr>
	  <td>Call a method</td>
	  <td>
	    <code>object<strong>.method</strong><em>(arguments)</em></code>
	  </td>
	  <td>
	    <p><code>string<strong>.length</strong></code></p>

	    <p><code>
	      array<strong>.delete_at</strong><em>(2)</em>
	    </code></p>

	    <p><code>string<strong>.gsub</strong><em>("ae", "ä")</em></code></p>
	  </td>
	  <td>
	    <p>Calling a method is also often referred to as
	      <em>sending a message</em> in Ruby. Basically we are sending an
	      object some kind of message and are waiting for its response.
	      This message may have no arguments or multiple arguments, depending
	      on the message.
	      So we kindly ask the object to do something or give us some
	      information.
	      When you "call a method" or "send a message" something happens. In the
	      first example we ask a String how long it is (how many
	      characters it consists of). In the last example we substitute all
	      occurrences of "ae" in the string with the German "ä".</p>

	    <p>
	      Different kinds of objects (Strings, Numbers, Arrays...)
	      understand different messages.
	    </p>
	  </td>
	</tr>
	<tr>
	  <td>Define a method</td>
	  <td>
	<pre><code><strong>def</strong> <em>name(parameter)</em>
	  <em># method body</em>
	<strong>end</strong></code></pre>
	  </td>
	  <td>
	<pre><code><strong>def</strong> <em>greet(name)</em>
	  <em>puts "Hi there " + name</em>
	<strong>end</strong></code></pre>
	  </td>
	  <td>
	    <p>Methods are basically reusable units of behaviour. And you can
	      define them yourself just like this. Methods are small and focused
	      on implementing a specific behaviour.</p>

	    <p>
	      Our example method is focused on greeting people.
	      You could call it like this: <code>greet("Tobi")</code>
	    </p>
	  </td>
	</tr>
	<tr>
	  <td>Equality</td>
	  <td><code>object <strong>==</strong> other</code></td>
	  <td>
	    <p><code>true <strong>==</strong> true # => true</code></p>

	    <p><code>3 <strong>==</strong> 4 # => false</code></p>

	    <p><code>"Hello" <strong>==</strong> "Hello" # => true</code></p>

	    <p><code>"Helo" <strong>==</strong> "Hello" # => false</code></p>
	  </td>
	  <td>
	    With two equal signs you can check if two things are the
	    same. If so, <code>true</code> will be returned; otherwise, the result
	    will be <code>false</code>.
	  </td>
	</tr>
	<tr>
	  <td>Inequality</td>
	  <td><code>object <strong>!=</strong> other</code></td>
	  <td>
	    <p><code>true <strong>!=</strong> true # => false</code></p>

	    <p><code>3 <strong>!=</strong> 4 # => true</code></p>
	  </td>
	  <td>
	    Inequality is the inverse to equality, e.g. it results in
	    <code>true</code> when two values are not the same and it results
	    in <code>false</code> when they are the same.
	  </td>
	</tr>
	<tr>
	  <td>Decisions with if</td>
	  <td>
	<pre><code><strong>if</strong> <em>condition</em>
	  # happens when true
	<strong>else</strong>
	  # happens when false
	<strong>end</strong>
	</code></pre>
	  </td>
	  <td>
	<pre><code><strong>if</strong> <em>input == password</em>
	  grant_access
	<strong>else</strong>
	  deny_access
	<strong>end</strong>
	</code></pre>
	  </td>
	  <td>
	    <p>With if-clauses you can decide based upon a <em>condition</em>
	      what to do. When the condition is considered true, then the code
	      after it is executed. If it is considered false, the code after
	      the "else" is executed.</p>

	    <p>
	      In the example, access is granted based upon the decision if a
	      given input matches the password.
	    </p>
	  </td>
	</tr>
	<tr>
	  <td>Constants</td>
	  <td><code><strong>CONSTANT =</strong> <em>some_value</em></code></td>
	  <td>
	<pre><code><strong>PI = 3.1415926535</strong>
	<strong>PI</strong> # => 3.1415926535</code></pre>
	<pre><code><strong>ADULT_AGE</strong> = 18
	<strong>ADULT_AGE</strong> # => 18</code></pre>
	  </td>
	  <td>
	    Constants look like variables, just in UPCASE. Both hold
	    values and give you a name to refer to those values. However while
	    the value a variable holds may change or might be of an unknown
	    value (if you save user input in a variable) constants are
	    different. They have a known value that should never change. Think
	    of it a bit like mathematical or physical constants. These don't
	    change, they always refer to the same value.
	  </td>
	</tr>
	<tr>
	  <td>Create</td>
	  <td>
		<p><code><strong>'</strong>A string<strong>'</strong></code></p>
	  </td>
	  <td>
		<p><code><strong>'</strong>Hello World<strong>'</strong></code></p>

		<p><code><strong>'</strong>a<strong>'</strong></code></p>

		<p><code>
		  <strong>'</strong>Just characters 129 _!$%^<strong>'</strong>
		</code></p>

		<p><code><strong>''</strong></code></p>
	  </td>
	  <td>
		A string is created by putting quotation marks around a
		character sequence. A <a href="https://github.com/bbatsov/ruby-style-guide/">Ruby style guide</a>
		recommends using single quotes for simple strings.
	  </td>
	</tr>
	<tr>
	  <td>Interpolation</td>
	  <td>
		<p><code><strong>"</strong>A string and an #{expression}<strong>"</strong></code></p>
	  </td>
	  <td>
		<p><code><strong>"</strong>Email: #{user.email}<strong>"</strong></code></p>

		<p><code><strong>"</strong>The total is #{2 + 2}<strong>"</strong></code></p>

		<p><code><strong>"</strong>A simple string<strong>"</strong></code></p>
	  </td>
	  <td>
		You can combine a string with a variable or Ruby expression using double quotation marks.
		This is called "interpolation." It is okay to use double quotation marks around a simple
		string, too.
	  </td>
	</tr>
	<tr>
	  <td>Length</td>
	  <td><code>string<strong>.length</strong></code></td>
	  <td>
		<p><code>"Hello"<strong>.length</strong> # => 5</code></p>

		<p><code>""<strong>.length</strong> # => 0</code></p>
	  </td>
	  <td>
		You can send a string a message, asking it how long it is and it
		will respond with the number of characters it consists of. You could
		use this to check if the desired password of a user exceeds the
		required minimum length. Notice how we add a comment to show the
		expected result.
	  </td>
	</tr>
	<tr>
	  <td>Concatenate</td>
	  <td><code>string <strong>+</strong> <em>string2</em></code></td>
	  <td>
	<pre><code>"Hello " <strong>+</strong> <em>"reader"</em>
	# => "Hello reader"</code></pre>
		<p><code>"a" <strong>+</strong> <em>"b"</em> <strong>+</strong>
		  <em>"c"</em>
		  # => "abc"</code></p>
	  </td>
	  <td>Concatenates two or more strings together and returns the result.</td>
	</tr>
	<tr>
	  <td>Substitute</td>
	  <td>
	<pre><code>string<strong>.gsub</strong><em>(a_string,
	substitute)</em></code></pre>
	  </td>
	  <td>
	<pre><code>"Hae"<strong>.gsub</strong><em>("ae", "ä")
	# => "Hä"</em></code></pre>
	<pre><code>"Hae"<strong>.gsub</strong><em>("b", "ä")
	# => "Hae"</em></code></pre>
	<pre><code>"Greenie"<strong>.gsub</strong><em>("e", "u")
	# => "Gruuniu"</em></code></pre>
	  </td>
	  <td><em>gsub</em> stands for "globally substitute". It substitutes all
		occurrences of <code>a_string</code> within the string with
		<code>substitute</code>.</td>
	</tr>
	<tr>
	  <td>Access</td>
	  <td>
		<code>
		  string<strong>[</strong><em>position</em><strong>]</strong>
		</code>
	  </td>
	  <td>
		<code>
		  "Hello"<strong>[</strong><em>1</em><strong>]</strong> # => "e"
		</code>
	  </td>
	  <td>
		Access the character at the given position in the string. Be aware
		that the first position is actually position <em>0</em>.
	  </td>
	</tr>

</tbody>
</table>
